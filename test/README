Quick Start
===========

The tests are expected to run on a development PC running ubuntu linux.  They
may work on similar platforms with minor tweaking.  They run against a target
under test, which is on the same network as the development PC.  The tests
control the target under test via an ssh connection (see Adding new targets if
your target does not have ssh).

1: Install dependencies

   $ sudo apt-get install python-pexpect python-nose python-libpcap \
   python-impacket

2: Create a configuration file for your tests.  See test.sample.conf for
   documentation and an example.

3: Build and deploy the mdns program for your target.  This step varies
   depending on your target.

4: Run the unit tests on the target if you built mdns with MDNS_TEST enabled.
   This step varies depending on your target, but in all cases it amounts to
   calling the mdns_test function somehow.  See mdns.h for details.

5: Run the system tests

   $ nosetests

6: To run a single test, say something like:

   $ nosetests -w ./test -s -v test_mdns:mdnsTest.test_AnswerAllSRVProbes

Adding new test targets
=======================

The test framework needs a way to configure mdns.  More specifically, it needs
a way to invoke mdns_launch with various arguments on the target.  The code
that does this is fairly minimal and is consolidated in mdns_subject.py.  To
add a new test target (such as a custom device with a serial console, or
whatever you need), create a new targettype in your test.conf file, and
implement the start, ready, and stop functions.

Notes
=====

-- Ensure that no other mDNS responder (like avahi) is running on your device
   under test.

-- To see the stdout of the tests, invoke nosetests with -s

-- We use a slightly modified version of pxssh.py.  That's why it's here in the
   test dir instead of using the one that comes with python.

-- We use a forked version of dnspython that works with mdns packets.  That's
   why we don't use the one available with your distro.

-- The linux tests require that you can ssh into the remote target without a
   password (i.e., your ssh-agent is set up properly and your public key is
   installed on the remote target).

-- If you use the "ControlMaster auto" option with your ssh client, you may get
   some unexpected failures from pxssh.  If you don't know what this means,
   you're probably not using it.

-- For some reason, avahi needs to run on the host that executes the test
   framework. Perhaps the test framwork doesn't setup the multicast socket
   properly.  This is a known issue.

-- If you get unexpected timeouts on tests that rely on sniffer capabilities,
   and you're using MAC OS X, you may need to recompile libpcap with the
   BIOCIMMEDIATE ioctl enabled.  See pcap-immediate.patch in this directory.

-- If you get "Exception: socket: Operation not permitted" for some tests, it's
   probably because you don't have sufficient permission to sniff packets.  You
   can resolve this by either running the tests as root, or adding the
   CAP_NET_RAW permission to python like so:

   $ sudo chmod --reference=/bin/ping `which python`
