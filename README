oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
o
o Zeroconf Suite for 8388V
o
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo

Introduction
------------

Zeroconf is a suite of software that allows a user to:

-- Acquire an IP address in the event that no DHCP server is available (IPv4LL)
-- Resolve names to IP addresses (mDNS)
-- Discover services available on a network (DNS-SD)

The IPv4LL implementation is written from scratch by cozybit.  The mDNS and
DNS-SD implementations are a port of the Apple Darwin mDNSResponder code, which
is licensed under the Apache 2.0 license.  In addition to the standard zeroconf
features, this suite implements a simple webserver that can be advertised using
mDNS.

Building
--------

The zerconf suite is based on the 8388V No Host SDK.  To build it, simply type
"make" in the Build directory of the SDK.  The output is an image called
nh8388v.axf that can be loaded into the 8388V RAM, or an image called csb0.bin
that can be loaded into flash using writespi.axf from Marvell.

Testing
-------

The zeroconf implementation can be operated from the serial console of the
8388V.  To automate testing, a python framework found in the test subdirectory
accesses the 8388V over the serial port.  Some tests require multiple nodes.  In
these cases, one node will be the 8388V under test, and the other will be the
node running the python framework.  The tests are:

all [unimplemented]: Run all of the tests.

ll-simple [unimplemented]: Acquire and return an IP address using link-local
addressing.  IP address can be any valid address from the 169.254.*.* link local
space.

ll-conflict [unimplemented]: This test requires two nodes, A (the host) and B
(the 8388V).  A responds to the first two ARP requests from B.  B should try
different random link local addresses until it finds one that A does not respond
to.

ll-fight [unimplemented]: This test requires two nodes, A (the host) and B (the
8388V).  A listens for ARP requests from B and assumes that B is trying to
acquire the link local address found in those ARP requests.  A assigns itself
the IP address in B's ARP request, thereby causing a conflict.  A sends a very
very late ARP reply to B.  B is expected to send a single ARP reply.  After
seeing this reply, A sends another ARP reply to maintain its claim on the
address.  Finally, B should seek another address.

mdns-simple [unimplemented]: This test requires two nodes, A (the host) and B
(the 8388V).  B assigns itself a known host name.  A pings B at the known host
name.

mdns-conflict [unimplemented]: This test requires two nodes, A (the host) and B
(the 8388V).  B tries to claim the name myname but A claims to have it.  Next, B
tries to claim myname-02.  A waits until it sees two attempts by B to claim this
name, then claims to have it.  Next, B attempts to claim myname-03.  A waits
until it sees three attempts by B to claim this name, then claims to have it.
Finally, B attempts to claim myname-04 and A lets B have the name.

sd-simple [unimplemented]: This test requires two nodes, A (the host) and B (the
8388V).  A browses for http service and B responds.

TODO
----

-- Introduce notion of "interface" in system abstraction
-- Add DEFEND capability to link local
-- Add option to "prime" link local with an IP address.
-- Make tcpip configuration in link local use callback instead of tcpip system
   interface.
-- Document link local interface
-- Document log interface
-- Document httpd interface
-- Create simple network manager?
-- Consolidate cozybits into their own directory